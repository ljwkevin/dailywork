1. redis hashmap和java hashmap有什么区别
    redis value只能是string
2.  kafka下游消息消费过慢怎么办
kafka消息积压怎么办

（1）如果是Kafka消费能力不足，则可以考虑增加 topic 的 partition 的个数，同时提升消费者组的消费者数量，消费数 = 分区数 （二者缺一不可）
（2）若是下游数据处理不及时，则提高每批次拉取的数量。批次拉取数量过少（拉取数据/处理时间 < 生产速度），使处理的数据小于生产的数据，也会造成数据积压。

3.  kafka 如何加快消费速度

1.增加分区（题上不让）
2.关闭autocommit（偏移量手工提交可以按需减少分区偏移量的更新，有利于提升消费速度）
3.增加单次拉取消息的大小（大量消息的场景下可减少拉取消息的次数）

4. kafka为什么有这么高的吞吐量
https://zhuanlan.zhihu.com/p/80917376
磁盘顺序读写
零拷贝
数据以分区形式存放
批量压缩
Page Cache:利用操作系统自身的内存而不是JVM空间内存


5. kafka 
   https://blog.csdn.net/qq_28900249/article/details/90346599
   https://www.jianshu.com/p/511962462e58 =>这个比较新
   1. zookeeper在kafka中作用，新的version中为什么要去掉zk
      在 Kafka 中，它被用于提交偏移量，因此如果节点在任何情况下都失败了，它都可以从之前提交的偏移量中获取除此之外，
      它还执行其他活动，如: leader 检测、分布式同步、配置管理、识别新节点何时离开或连接、集群、节点实时状态等等。
     KIP-500 思想，是使用社区自研的基于 Raft 的共识算法， 替代 ZooKeeper，实现 Controller 自选举
   2. leader处理partition的所有读写请求, follower保证leader被挂掉后顶上来，并不对外提供服务
   3. 生成者分区策略
   4. kafka如何保证不重复消费
    对每个partitionID，产生一个uniqueID,.只有这个partition的数据被完全消费，才算成功，否则失败回滚。下次若重复执行，就skip
   5. Kafka 判断一个节点是否还活着有那两个条件
      节点必须可以维护和 ZooKeeper 的连接，Zookeeper 通过心跳机制检查每个节点的连接
       如果节点是个 follower,他必须能及时的同步 leader 的写操作，延时不能太久
   6. Leader 总是 -1，怎么破
       删除 ZooKeeper 节点 /controller，触发 Controller 重选举。
   7. Leader选举策略
   8. zero copy
    在 Kafka 中，只有索引应用了 mmap
    日志文件读写所用的 TransportLayer. 它的某个实现类使用了 FileChannel 的 transferTo 方法,该方法底层使用 sendfile 实现了 Zero Copy。  Kafka 而言，如果 I/O 通道使用普通的 PLAINTEXT，那么，Kafka 就可以利用 Zero Copy 特性.
     如果 I/O 通道启用了 SSL，那么，Kafka 便无法利用 Zero Copy 特性了。
   9. Controller 发生网络分区(Network Partitioning)时，Kafka 会怎 么样?
     一旦出现网络分区，这些请求将不能顺利到达 Broker 端。这将影响主题的创建、修改、删除操作的信息同步，表现为 集群仿佛僵住了一样，无法感知到后面的所有操作.
  10. Java Consumer 为什么采用单线程来获取消息.
       Java Consumer 是双线程的设计。一 个线程是用户主线程，负责获取消息;另一个线程是心跳线程，负责向 Kafka 汇报消费者 存活情况. 
      单线程获取消息的设计能够避免阻塞式的消息获取方式。单线程轮询方式容易实现异步非阻塞式.
  11. Follower 副本消息同步的完整流程
        https://www.jianshu.com/p/511962462e58


6. zookeeper面试题
   https://www.cnblogs.com/lanqiu5ge/p/9405601.html
  https://zhuanlan.zhihu.com/p/94146775
   1. 随着zookeeper的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。
   2. ZAB协议
     ZAB协议包括两种基本的模式：崩溃恢复和消息广播。
   3. watcher
     一旦一个Watcher被触发，Zookeeper都会将其从相应的存储中移除 
   4. 服务器角色
       Leader  Follower Observer
       Follower: 处理客户端的非事务请求，转发事务请求给Leader服务器
   5. 服务器状态
       LOOKING FOLLOWING LEADING OBSERVING
   6. FastLeaderElection
   7. 数据同步
      直接差异化同步（DIFF同步）
      先回滚再差异化同步（TRUNC+DIFF同步） 
      仅回滚同步（TRUNC同步）
      全量同步（SNAP同步）
   8. zookeeper zxid构成
     epoch + id
   9. zookeeper负载均衡和nginx负载均衡区别
      zk的负载均衡是可以调控，nginx只是能调权重，其他需要可控的都需要自己写插件；但是nginx的吞吐量比zk大很多，应该说按业务选择用哪种方式。
       zk不存在单点问题，zab机制保证单点故障可重新选举一个leader
       nginx 自带负载均衡算法
   10. 集群支持动态添加机器吗？
       全部重启
       逐个重启
   11. ZAB和Paxos算法的联系与区别
   ZAB用来构建高可用的分布式数据主备系统（Zookeeper），Paxos是用来构建分布式一致性状态机系统。
   12. zookeeper在我们的系统中有哪些应用：
      OD：注册中心  EOD: aspen config
   13. Zookeeper队列管理
       同步队列
       队列按照 FIFO 方式进行入队和出队操作。
   14. 对zookeeper来说，它采用的方式是写任意
    15. Zookeeper 的核心是原子广播 ZAB
    16. zookeeper是如何保证事务的顺序一致性的
        两段协议，首先会向其他的server发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。
    17. Zookeeper同步流程
         https://zhuanlan.zhihu.com/p/94146775
    18. 机器中为什么会有leader
        有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能
     19. chubby 是 google 的，完全实现 paxos 算法，不开源。zookeeper 是 chubby的开源实现，使用 zab 协议，paxos 算法的变种。


 7 jvm面试题
    https://www.cnblogs.com/JesseP/p/11750847.html
    java对象创建过程：首先去检查这个指令的参数是否能在常量池中定义到一个类的符号引用
    java中会存在内存泄漏问题吗：理论上不会，但是然而在实际开发中，可能会存在无用但可达的对象，这些对象不能被GC回收，因此也会导致内存泄露的发生
    GC:  新生代一般采用复制算法 GC，老年代使用标记整理算法。
    垃圾收集器：串行新生代收集器、串行老生代收集器、并行新生代收集器、并行老年代收集器。CMS
   https://www.cnblogs.com/chenpt/p/9803298.html
     新生代收集器：Serial、ParNew、Parallel Scavenge
    老年代收集器：CMS、Serial Old、Parallel Old
    整堆收集器： G1
    gc root有哪些： 
    https://blog.csdn.net/weixin_37990128/article/details/109495858    
    jvm元空间：
    https://www.jianshu.com/p/474d98fc4776
    引用的分类： 强引用 软引用 弱引用 虚引用
    outofMemeory原因： 
    内存加载的数据量太大：一次性从数据库取太多数据
    代码中存在循环产生过多的重复对象

 8. 并发容器 面试题

 9. redis面试题

 10 docker面试题

 11. 计算机网络面试题
     https://juejin.cn/post/6844904125692379143
     1. TCP UDP 区别 
        https://www.jianshu.com/p/1cf5e20e11a9
     2. TCP如何保证数据的可靠传输的
     3. TCP三次握手的过程
      输入网址后会发生什么
  12. 操作系统面试题
   